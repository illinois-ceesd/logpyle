name: CI
on:
    push:
        branches:
        - main
    pull_request:
    schedule:
        - cron:  '5 0 * * *'

jobs:
    Flake8:
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v3
        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            # matches compat target in setup.py
            python-version: '3.7'
        - name: Run flake8
          run: |
            pip install flake8 pep8-naming flake8-quotes flake8-comprehensions flake8-isort types-psutil numpy
            flake8 setup.py doc/conf.py logpyle bin/* examples/*.py

    Examples:
        runs-on: ${{ matrix.os }}
        strategy:
          fail-fast: false
          matrix:
            python-version: [3.7, 3.8, 3.9, 3.x]
            os: [ubuntu-latest, macos-latest]

        steps:
        - uses: actions/checkout@v3
        - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
          uses: actions/setup-python@v4
          with:
            python-version: ${{ matrix.python-version }}
        - name: Install prerequisites
          run: |
            [[ $(uname) == "Darwin" ]] && brew install open-mpi
            [[ $(uname) == "Linux" ]] && sudo apt-get update && sudo apt-get install -y mpich libmpich-dev
            pip install wheel matplotlib mpi4py psutil
            pip install -e .
        - name: Run and test example
          run: |
            set -x
            python examples/log.py
            runalyzer-gather summary.sqlite log.sqlite
            runalyzer -m summary.sqlite -c 'dbplot(q("select $t_sim, $t_step"))'

            # Perform some simple tests on the output file

            ## Check for warnings and logging
            runalyzer summary.sqlite  -c 'db.print_cursor(db.q("select * from warnings"))'
            runalyzer summary.sqlite  -c 'db.print_cursor(db.q("select * from warnings"))' | grep Oof
            runalyzer summary.sqlite  -c 'db.print_cursor(db.q("select * from logging"))'
            runalyzer summary.sqlite  -c 'db.print_cursor(db.q("select * from logging"))' | grep WARNING

            ## Check that t_log is within [0, 1]
            runalyzer -m summary.sqlite -c 'assert all([0 < r[0] < 1 for r in q("select $t_log.max")])'

            ## Check that t_init is within [0, 20], and that there is only one value
            runalyzer -m summary.sqlite -c 'assert all([0 < r[0] < 20 for r in q("select $t_init.max")])'
            runalyzer -m summary.sqlite -c 'assert len([r[0] for r in q("select $t_init.max")]) == 1'

            # Allow oversubscription of ranks to cores with Open MPI
            export OMPI_MCA_rmaps_base_oversubscribe=1
            export RDMAV_FORK_SAFE=1

            mpirun -n 4 python -m mpi4py examples/log-mpi.py

            rm summary.sqlite
            runalyzer-gather summary.sqlite mpi-log*.sqlite
            runalyzer -m summary.sqlite -c 'dbplot(q("select $t_sim.max, $t_step.max"))'

            # Perform some simple tests on the output file

            ## Check for warnings and logging
            runalyzer summary.sqlite  -c 'db.print_cursor(db.q("select * from warnings"))'
            runalyzer summary.sqlite  -c 'db.print_cursor(db.q("select * from warnings"))' | grep Oof
            runalyzer summary.sqlite  -c 'db.print_cursor(db.q("select * from logging"))'
            runalyzer summary.sqlite  -c 'db.print_cursor(db.q("select * from logging"))' | grep WARNING

            ## Check that t_log is within [0, 1]
            runalyzer -m summary.sqlite -c 'assert all([0 < r[0] < 1 for r in q("select $t_log.max")])'

            ## Check that t_init is within [0, 20], and that there is only one value
            runalyzer -m summary.sqlite -c 'assert all([0 < r[0] < 20 for r in q("select $t_init.max")])'
            runalyzer -m summary.sqlite -c 'assert len([r[0] for r in q("select $t_init.max")]) == 1'



    docs:
        name: Documentation
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v3
        -
            uses: actions/setup-python@v4
            with:
                python-version: '3.x'
        -   name: "Main Script"
            run: |
                curl -L -O https://tiker.net/ci-support-v0
                . ci-support-v0
                build_py_project_in_venv
                build_docs

    mypy:
        name: Mypy
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v3
        -
            uses: actions/setup-python@v4
            with:
                python-version: '3.x'
        -   name: "Main Script"
            run: |
                curl -L -O -k https://gitlab.tiker.net/inducer/ci-support/raw/main/prepare-and-run-mypy.sh
                export EXTRA_INSTALL="pytools numpy types-psutil"
                . ./prepare-and-run-mypy.sh python3

